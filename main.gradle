allprojects {
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = JavaVersion.VERSION_1_8

    compileJava.options.encoding = "UTF-8"
    compileTestJava.options.encoding = "UTF-8"

    dependencies {

        implementation 'io.projectreactor:reactor-core'
        implementation 'io.projectreactor.addons:reactor-extra'

        testImplementation 'io.projectreactor:reactor-test'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.security:spring-security-test'
        testImplementation('org.junit.jupiter:junit-jupiter')

        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor  "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly  "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor  "org.projectlombok:lombok:${lombokVersion}"
        implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")

        if (!project.name.equalsIgnoreCase(modelModule) && !project.name.equalsIgnoreCase(useCaseModule)) {
            dependencies.add("implementation", "ch.qos.logback:logback-classic:${logbackVersion}")
            dependencies.add("implementation", "io.netty:netty-common:4.1.115.Final")
            dependencies.add("implementation", "net.logstash.logback:logstash-logback-encoder:${logstashLogbackVersion}")
        }
    }

    test.finalizedBy(project.tasks.jacocoTestReport)

    jacocoTestReport {
        dependsOn test
        reports {
            xml.setRequired true
            xml.setOutputLocation file("${buildDir}/reports/jacoco.xml")
            csv.setRequired false
            html.setOutputLocation file("${buildDir}/reports/jacocoHtml")
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        "com/sermaluc/retotecnico/**/MainApplication.class",
                        "com/sermaluc/retotecnico/**/**MapperImpl.class"
                ])
            }))
        }
    }

    test {
        useJUnitPlatform()
    }

}

jacoco {
    toolVersion = "${jacocoVersion}"
    reportsDirectory = file("$buildDir/reports")
}

tasks.register('jacocoMergedReport', JacocoReport) {
    dependsOn = subprojects.jacocoTestReport
    additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(subprojects.sourceSets.main.output)
    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
    reports {
        xml.setRequired true
        csv.setRequired false
        html.setRequired true
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true'
    ]
}

tasks.named('wrapper') {
    gradleVersion = '8.5'
    distributionSha256Sum='9d926787066a081739e8200858338b4a69e837c3a821a33aca9db09dd4a41026'
}
